<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" 
	xmlns:ws="http://www.mulesoft.org/schema/mule/ws"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">


<flow name="get:/Appointment:api-config">
        <dw:transform-message doc:name="Prepare Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://example.com/appointment-service
---
{
	ns0#GetAppointments: {
		(patientID: (inboundProperties."http.query.params".patient splitBy '/')[-1] )
			when inboundProperties."http.query.params".patient != null,
		(practitionerID: (inboundProperties."http.query.params".practitioner splitBy '/')[-1] )
			when inboundProperties."http.query.params".practitioner != null
		
	}
}]]></dw:set-payload>
            <dw:set-variable variableName="requestURI"><![CDATA[%dw 1.0
%output application/java
---
"http://" ++ inboundProperties.host ++ inboundProperties."http.request.uri"]]></dw:set-variable>
        </dw:transform-message>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <ws:consumer config-ref="Appointment" operation="GetAppointments" doc:name="Get Appointments"/>
        <logger level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform to FHIR Bundle of Appointments">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://example.com/appointment-service
---
{
	resourceType: "Bundle",
	type: "searchset",
	link: [{
		relation: "self",
		url: flowVars.requestURI
	}],
	meta: {
		lastUpdated: now
	},
	total: sizeOf payload.ns0#GetAppointmentsResponse when payload.ns0#GetAppointmentsResponse is :object otherwise 0,
	entry: payload.ns0#GetAppointmentsResponse.*Appointment map 
		{
		fullUrl: p('baseUri') ++ "/Appointment/" ++ $.id,
		resource: {
			resourceType: "Appointment",
			id: $.id,
			description: $.description,
			start: $.startTime,
			end: $.endTime,
			(minutesDuration: $.durationMinutes) when $.durationMinutes != null and $.durationMinutes != "",
			participant: [
				{
					status: "accepted",
					actor: {
						reference: $.patientReference,
						display: $.patientName
					}
				},
				{
					status: "accepted",
					actor: {
						reference: $.practitionerReference,
						display: $.practitionerName
					}
				}
			],
			status: $.status,
			slot: [
				{
					reference: $.slotReference
				}
			]
		}
	} when payload.ns0#GetAppointmentsResponse is :object otherwise []
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>


<flow name="post:/Appointment:application/json:api-config">
        <dw:transform-message doc:name="Prepare request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://example.com/appointment-service
---
{
	ns0#CreateAppointment: {
		startTime: payload.start,
		endTime: payload.end,
		description: payload.description default "",
		durationMinutes: payload.minutesDuration default "",
		patientReference: (payload.participant.actor.reference filter ($ startsWith "Patient"))[0] default "",
		patientName: (payload.participant filter ($.actor.reference startsWith "Patient"))[0].actor.display default "",
		practitionerReference: (payload.participant.actor.reference filter ($ startsWith "Practitioner"))[0] default "",
		practitionerName: (payload.participant filter ($.actor.reference startsWith "Practitioner"))[0].actor.display default "",
		status: payload.status default "free",
		slotReference: payload.slot[0].reference default ""
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Appointment" operation="CreateAppointment" doc:name="Create Appointment"/>

        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <choice doc:name="Successful?">
            <when expression="#[dw('payload.AppointmentFault == null')]">
                <dw:transform-message doc:name="Set Location and http.status property">

                    <dw:set-property propertyName="Location"><![CDATA[%dw 1.0
%output application/java
---
p('baseUri') ++ '/Appointment/' ++ payload.CreateAppointmentResponse.id]]></dw:set-property>
                    <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
201]]></dw:set-property>
                </dw:transform-message>
                <set-payload value="#[NullPayload.getInstance()]" doc:name="NullPayload"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Error message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	message: payload.AppointmentFault.errorMessage
}]]></dw:set-payload>
                    <dw:set-property propertyName="http.status"><![CDATA[%dw 1.0
%output application/java
---
422]]></dw:set-property>
                </dw:transform-message>

            </otherwise>
        </choice>
    </flow>


</mule>
